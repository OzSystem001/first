<?php
/**
 * Server setup and disk space information
 */

// Check if this is a POST request for configuration
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    handleConfigurationRequest();
} else {
    provideDiskSpaceInfo();
}

/**
 * Handle configuration request
 */
function handleConfigurationRequest() {
    if (!isset($_POST['maxUploadSize']) || !isset($_POST['uploadDirectory']) || !isset($_POST['allowedFileTypes'])) {
        sendResponse(false, '必要なパラメータが不足しています。');
        exit;
    }
    
    $maxUploadSize = intval($_POST['maxUploadSize']);
    $uploadDirectory = $_POST['uploadDirectory'];
    $allowedFileTypes = $_POST['allowedFileTypes'];
    
    if ($maxUploadSize < 1 || $maxUploadSize > 100) {
        sendResponse(false, '最大アップロードサイズは1GB〜100GBの間で指定してください。');
        exit;
    }
    
    $maxUploadSizeBytes = $maxUploadSize * 1024 * 1024 * 1024;
    
    if (empty($uploadDirectory)) {
        $uploadDirectory = __DIR__ . '/uploads';
    } else if (strpos($uploadDirectory, '/') !== 0 && strpos($uploadDirectory, ':') === false) {
        $uploadDirectory = __DIR__ . '/' . $uploadDirectory;
    }
    
    if (!file_exists($uploadDirectory)) {
        if (!mkdir($uploadDirectory, 0777, true)) {
            sendResponse(false, 'アップロードディレクトリを作成できませんでした: ' . $uploadDirectory);
            exit;
        }
    }
    
    if (!is_writable($uploadDirectory)) {
        if (!chmod($uploadDirectory, 0777)) {
            sendResponse(false, 'アップロードディレクトリに書き込み権限を設定できませんでした: ' . $uploadDirectory);
            exit;
        }
    }
    
    $allowedExtensions = [];
    if (!empty($allowedFileTypes)) {
        $types = explode(',', $allowedFileTypes);
        foreach ($types as $type) {
            $type = trim($type);
            if (!empty($type)) {
                if (substr($type, 0, 1) === '.') {
                    $type = substr($type, 1);
                }
                $allowedExtensions[] = strtolower($type);
            }
        }
    }
    
    $settingsContent = "<?php\n";
    $settingsContent .= "/**\n";
    $settingsContent .= " * Configuration settings for file upload system\n";
    $settingsContent .= " * Generated by setup.php on " . date('Y-m-d H:i:s') . "\n";
    $settingsContent .= " */\n\n";
    $settingsContent .= "// Maximum upload size in bytes (" . $maxUploadSize . "GB)\n";
    $settingsContent .= "\$maxUploadSize = " . $maxUploadSizeBytes . "; // " . $maxUploadSize . "GB in bytes\n\n";
    $settingsContent .= "// Upload directory (absolute path)\n";
    $settingsContent .= "\$uploadDirectory = '" . addslashes($uploadDirectory) . "';\n\n";
    
    $settingsContent .= "// Allowed file extensions (empty array means all types are allowed)\n";
    $settingsContent .= "\$allowedFileExtensions = [";
    if (!empty($allowedExtensions)) {
        $settingsContent .= "'" . implode("', '", $allowedExtensions) . "'";
    }
    $settingsContent .= "];\n\n";
    
    $settingsContent .= "// Maximum execution time (seconds)\n";
    $settingsContent .= "\$maxExecutionTime = 3600; // 1 hour\n\n";
    $settingsContent .= "// Maximum input time (seconds)\n";
    $settingsContent .= "\$maxInputTime = 3600; // 1 hour\n\n";
    $settingsContent .= "// Post max size (should be slightly larger than upload max filesize)\n";
    $settingsContent .= "\$postMaxSize = " . ($maxUploadSizeBytes + 1024 * 1024 * 1024) . "; // " . ($maxUploadSize + 1) . "GB in bytes\n\n";
    $settingsContent .= "// Memory limit\n";
    $settingsContent .= "\$memoryLimit = '1024M'; // 1GB\n\n";
    $settingsContent .= "// You can modify these settings as needed\n";
    
    $configDir = __DIR__ . '/config';
    if (!file_exists($configDir)) {
        if (!mkdir($configDir, 0777, true)) {
            sendResponse(false, '設定ディレクトリを作成できませんでした。');
            exit;
        }
    }
    
    $settingsFile = $configDir . '/settings.php';
    if (file_put_contents($settingsFile, $settingsContent) === false) {
        sendResponse(false, '設定ファイルを保存できませんでした。');
        exit;
    }
    
    @ini_set('upload_max_filesize', $maxUploadSize . 'G');
    @ini_set('post_max_size', ($maxUploadSize + 1) . 'G');
    @ini_set('max_execution_time', 3600);
    @ini_set('max_input_time', 3600);
    @ini_set('memory_limit', '1024M');
    
    sendResponse(true, '設定が正常に保存されました。', [
        'maxUploadSize' => $maxUploadSize,
        'maxUploadSizeFormatted' => $maxUploadSize . 'GB',
        'uploadDirectory' => $uploadDirectory,
        'allowedFileTypes' => $allowedExtensions
    ]);
}

/**
 * Provide disk space information
 */
function provideDiskSpaceInfo() {
    $settingsFile = __DIR__ . '/config/settings.php';
    $isConfigured = file_exists($settingsFile);
    
    $maxUploadSize = 10 * 1024 * 1024 * 1024; // 10GB
    $uploadDirectory = __DIR__ . '/uploads';
    $allowedFileExtensions = [];
    
    if ($isConfigured) {
        require_once $settingsFile;
    }
    
    $directoryStatus = [
        'exists' => file_exists($uploadDirectory),
        'writable' => is_writable($uploadDirectory)
    ];
    
    $rootDiskSpace = [
        'total' => disk_total_space('/'),
        'free' => disk_free_space('/'),
        'used' => disk_total_space('/') - disk_free_space('/')
    ];
    
    $rootDiskSpace['percentUsed'] = ($rootDiskSpace['used'] / $rootDiskSpace['total']) * 100;
    
    $rootDiskSpace['totalFormatted'] = formatBytes($rootDiskSpace['total']);
    $rootDiskSpace['freeFormatted'] = formatBytes($rootDiskSpace['free']);
    $rootDiskSpace['usedFormatted'] = formatBytes($rootDiskSpace['used']);
    
    $uploadDiskSpace = null;
    if (file_exists($uploadDirectory)) {
        $uploadDiskSpace = [
            'total' => disk_total_space($uploadDirectory),
            'free' => disk_free_space($uploadDirectory),
            'used' => disk_total_space($uploadDirectory) - disk_free_space($uploadDirectory)
        ];
        
        $uploadDiskSpace['percentUsed'] = ($uploadDiskSpace['used'] / $uploadDiskSpace['total']) * 100;
        
        $uploadDiskSpace['totalFormatted'] = formatBytes($uploadDiskSpace['total']);
        $uploadDiskSpace['freeFormatted'] = formatBytes($uploadDiskSpace['free']);
        $uploadDiskSpace['usedFormatted'] = formatBytes($uploadDiskSpace['used']);
    }
    
    // Get max upload size from PHP configuration
    $uploadMaxFilesize = getMaxUploadSize();
    
    $settingsStatus = [
        'exists' => $isConfigured,
        'writable' => is_writable(dirname($settingsFile))
    ];
    
    $response = [
        'success' => true,
        'isConfigured' => $isConfigured,
        'directoryStatus' => $directoryStatus,
        'rootDiskSpace' => $rootDiskSpace,
        'uploadDiskSpace' => $uploadDiskSpace,
        'maxUploadSize' => $maxUploadSize,
        'maxUploadSizeFormatted' => formatBytes($maxUploadSize),
        'phpUploadLimit' => $uploadMaxFilesize,
        'phpUploadLimitFormatted' => formatBytes($uploadMaxFilesize),
        'settingsStatus' => $settingsStatus,
        'allowedFileExtensions' => $isConfigured && isset($allowedFileExtensions) ? $allowedFileExtensions : []
    ];
    
    sendResponse(true, '', $response);
}

/**
 * Send JSON response
 *
 * @param bool $success Whether the operation was successful
 * @param string $message Message to display to the user
 * @param array $data Additional data to include in the response
 */
function sendResponse($success, $message, $data = []) {
    $response = [
        'success' => $success,
        'message' => $message
    ];
    
    if (!empty($data)) {
        $response = array_merge($response, $data);
    }
    
    header('Content-Type: application/json');
    echo json_encode($response);
    exit;
}

/**
 * Format bytes to human-readable format
 *
 * @param int $bytes Number of bytes
 * @param int $precision Decimal precision
 * @return string Formatted size with unit
 */
function formatBytes($bytes, $precision = 2) {
    $units = ['B', 'KB', 'MB', 'GB', 'TB'];
    
    $bytes = max($bytes, 0);
    $pow = floor(($bytes ? log($bytes) : 0) / log(1024));
    $pow = min($pow, count($units) - 1);
    
    $bytes /= pow(1024, $pow);
    
    return round($bytes, $precision) . ' ' . $units[$pow];
}

/**
 * Get maximum upload size from PHP configuration
 *
 * @return int Maximum upload size in bytes
 */
function getMaxUploadSize() {
    $maxUpload = convertPHPSizeToBytes(ini_get('upload_max_filesize'));
    $maxPost = convertPHPSizeToBytes(ini_get('post_max_size'));
    return min($maxUpload, $maxPost);
}

/**
 * Convert PHP size notation to bytes
 *
 * @param string $size PHP size notation (e.g., '10M', '1G')
 * @return int Size in bytes
 */
function convertPHPSizeToBytes($size) {
    $size = trim($size);
    $unit = strtolower(substr($size, -1));
    $value = intval(substr($size, 0, -1));
    
    switch ($unit) {
        case 'g':
            $value *= 1024;
        case 'm':
            $value *= 1024;
        case 'k':
            $value *= 1024;
    }
    
    return $value;
}
